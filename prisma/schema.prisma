// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Comercial {
  id      String   @id @default(uuid())
  name    String   @unique
  email   String
  clients Client[]
}

model Coordinator {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  supervisors Supervisor[]
}

model Supervisor {
  id            String      @id @default(uuid())
  name          String      @unique
  users         User[]
  email         String      @unique
  zones         Zone[]
  coordinator   Coordinator @relation(fields: coordinatorId, references: id)
  coordinatorId String
}

model Account {
  id       String @id @default(uuid())
  email    String @unique
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  password String
}

model User {
  id           String      @id @default(uuid())
  name         String
  email        String      @unique
  picture      String?
  role         user_role
  account      Account?
  clients      Client[]
  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
  reports      Report[]
  client       Client?     @relation("client_account")
}

enum user_role {
  backoffice
  merchandiser
  client
  superadmin
}

model Branch {
  id          String     @id @default(uuid())
  name        String
  displayName String
  locality    String
  address     String
  zone        Zone       @relation(fields: [zoneId], references: [id])
  zoneId      String
  chain       Chain      @relation(fields: [chainId], references: [id])
  chainId     String
  reports     Report[]
  coverages   Coverage[]
}

model Zone {
  id           String     @id @default(uuid())
  name         String     @unique
  region       String
  branches     Branch[]
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id])
  supervisorId String
}

model Client {
  id          String               @id @default(uuid())
  displayName String               @unique
  name        String               @unique
  address     String
  cuit        String               @unique
  admin       User                 @relation(fields: [adminId], references: [id])
  adminId     String
  comercial   Comercial            @relation(fields: [comercialId], references: [id])
  comercialId String
  categories  ClientCategory[]
  reports     Report[]
  periods     ClientPeriodReport[]
  coverages   Coverage[]
  products    ProductClient[]
  user        User?                @relation("client_account", fields: userId, references: id)
  userId      String?
  control     Boolean?
}

model ClientCategory {
  id         String    @id @default(uuid())
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

}

model Chain {
  id       String         @id @default(uuid())
  name     String         @unique
  branches Branch[]
  products ProductChain[]
  reports  Report[]
  format   Format         @relation(fields: formatId, references: id)
  formatId String
}

model Format {
  id     String  @id @default(uuid())
  name   String  @unique
  chains Chain[]
}

model Category {
  id       String           @id @default(uuid())
  name     String           @unique
  clients  ClientCategory[]
  reports  CategoryReport[]
  products Product[]
}

model ReportType {
  id      String         @id @default(uuid())
  name    String         @unique
  alias   String         @unique
  periods PeriodReport[]
}

model PeriodReport {
  id           String               @id @default(uuid())
  clients      ClientPeriodReport[]
  type         ReportType           @relation(fields: [reportTypeId], references: [id])
  reportTypeId String
  name         String               @unique
  alias        String               @unique
}

model ClientPeriodReport {
  id       String        @id @default(uuid())
  period   PeriodReport? @relation(fields: [periodId], references: [id])
  periodId String?
  client   Client?       @relation(fields: [clientId], references: [id])
  clientId String?
}

model Coverage {
  id        String  @id @default(uuid())
  client    Client? @relation(fields: [clientId], references: [id])
  clientId  String?
  branch    Branch? @relation(fields: [branchId], references: [id])
  branchId  String?
  frecuency Int     @default(1)
  intensity Int     @default(1)
}

model Report {
  id         String           @id @default(uuid())
  branch     Branch           @relation(fields: [branchId], references: [id])
  branchId   String
  chain      Chain            @relation(fields: [chainId], references: [id])
  chainId    String
  client     Client           @relation(fields: [clientId], references: [id])
  clientId   String
  createdAt  DateTime         @default(now())
  creator    User             @relation(fields: [creatorId], references: [id])
  creatorId  String
  isComplete Boolean
  location   Location         @relation(fields: [locationId], references: [id])
  locationId String
  revised    Boolean          @default(false)
  type       report_types     @default(photographic)
  categories CategoryReport[]
}

model CategoryReport {
  id           String   @id @default(uuid())
  report       Report   @relation(fields: [reportId], references: [id])
  reportId     String
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  badCategory  Boolean  @default(false)
  withoutStock Boolean  @default(false)

  photos     ImageReport[]
  pricings   ProductPricingReport[]
  breakevens ProductBreakevenReport[]
}

model ProductPricingReport {
  id         String          @id @default(uuid())
  product    Product         @relation(fields: [productId], references: [id])
  productId  String
  pricing    Decimal         @default(0)
  category   CategoryReport? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model ProductBreakevenReport {
  id         String          @id @default(uuid())
  product    Product         @relation(fields: [productId], references: [id])
  productId  String
  status     Boolean         @default(false)
  category   CategoryReport? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model ImageReport {
  category     CategoryReport? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  id           String          @id @default(uuid())
  name         String
  favorite     Boolean         @default(false)
  type         stock_type      @default(primary)
  comment      String          @default("")
  uri          String?
  delete       Boolean         @default("false")
  deleteReason String          @default("")
}

model Location {
  id        String  @id @default(uuid())
  latitude  Decimal
  longitude Decimal
  report    Report?
}

model Product {
  id         String                   @id @default(uuid())
  name       String                   @unique
  type       stock_type               @default(primary)
  category   Category                 @relation(fields: [categoryId], references: [id])
  categoryId String
  chains     ProductChain[]
  clients    ProductClient[]
  pricings   ProductPricingReport[]
  breakevens ProductBreakevenReport[]
}

model ProductClient {
  id        String  @id @default(uuid())
  client    Client  @relation(fields: clientId, references: id)
  clientId  String
  product   Product @relation(fields: productId, references: id)
  productId String
}

model ProductChain {
  id        String  @id @default(uuid())
  chain     Chain   @relation(fields: chainId, references: id)
  chainId   String
  product   Product @relation(fields: productId, references: id)
  productId String
}

enum stock_type {
  primary
  secondary
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum report_types {
  pricing
  breakeven
  photographic
}
